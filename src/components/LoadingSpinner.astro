---
export interface Props {
  size?: 'sm' | 'md' | 'lg';
  variant?: 'primary' | 'secondary' | 'accent';
  text?: string;
}

const { size = 'md', variant = 'primary', text } = Astro.props;
---

<div class={`loading-spinner ${size} ${variant}`}>
  <div class="spinner"></div>
  {text && <span class="loading-text">{text}</span>}
</div>

<style>
  .loading-spinner {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-3);
  }

  .spinner {
    border-radius: 50%;
    animation: spin 1s linear infinite;
    border-style: solid;
    border-color: transparent;
  }

  /* Sizes */
  .loading-spinner.sm .spinner {
    width: 16px;
    height: 16px;
    border-width: 2px;
  }

  .loading-spinner.md .spinner {
    width: 24px;
    height: 24px;
    border-width: 3px;
  }

  .loading-spinner.lg .spinner {
    width: 32px;
    height: 32px;
    border-width: 4px;
  }

  /* Variants */
  .loading-spinner.primary .spinner {
    border-top-color: var(--color-primary-600);
    border-right-color: var(--color-primary-300);
  }

  .loading-spinner.secondary .spinner {
    border-top-color: var(--color-secondary-600);
    border-right-color: var(--color-secondary-300);
  }

  .loading-spinner.accent .spinner {
    border-top-color: var(--color-accent-600);
    border-right-color: var(--color-accent-300);
  }

  .loading-text {
    font-size: var(--text-sm);
    color: var(--color-text-secondary);
    font-weight: var(--font-medium);
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .spinner {
      animation: none;
      border: 3px solid var(--color-primary-600);
    }
  }
</style>