---
import Layout from './Layout.astro';
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import NotionNav from '../components/NotionNav.astro';
import RelatedPosts from '../components/RelatedPosts.astro';

type Props = {
  entry: CollectionEntry<'blog'>;
};

const { entry } = Astro.props;
const { Content } = await entry.render();

// Format date function
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

// Estimate reading time
const estimateReadingTime = (text: string) => {
  const wordsPerMinute = 200;
  const words = text.split(/\s+/).length;
  const minutes = Math.ceil(words / wordsPerMinute);
  return minutes;
};

// Get content for reading time estimation
const readingTime = estimateReadingTime(entry.body);

// Make Image component available to MDX content
const components = { Image };

// Ensure canonical URL for blog posts
const canonicalURL = `https://prassanna.io/blog/${entry.slug}/`;

// Generate breadcrumb structured data
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": "https://prassanna.io"
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Blog",
      "item": "https://prassanna.io/blog"
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": entry.data.title,
      "item": canonicalURL
    }
  ]
};
---

<Layout 
  title={`${entry.data.title} | Prassanna Ravishankar`} 
  description={entry.data.description} 
  image={entry.data.heroImage}
  article={true}
  publishedTime={entry.data.pubDate.toISOString()}
  modifiedTime={entry.data.updatedDate?.toISOString()}
  tags={entry.data.tags}
>
  <!-- Canonical handled by Layout -->
  
  <!-- Breadcrumb structured data -->
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
  
  <article class="container mx-auto py-12">
    <div class="max-w-3xl mx-auto">
      <!-- Breadcrumb navigation -->
      <nav class="text-sm text-gray-500 dark:text-gray-400 mb-8" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2">
          <li>
            <a href="/" class="hover:text-blue-600 dark:hover:text-blue-400">Home</a>
          </li>
          <li>
            <svg class="w-3 h-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li>
            <a href="/blog" class="hover:text-blue-600 dark:hover:text-blue-400">Blog</a>
          </li>
          <li>
            <svg class="w-3 h-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li>
            <span class="text-gray-700 dark:text-gray-300" aria-current="page">
              {entry.data.title}
            </span>
          </li>
        </ol>
      </nav>
      
      <!-- Hero image if available -->
      {entry.data.heroImage && (
        <div class="mb-8">
          <Image
            src={entry.data.heroImage}
            alt={entry.data.title}
            width={1200}
            height={630}
            class="w-full h-auto rounded-lg shadow-md aspect-video object-cover"
            loading="eager"
            fetchpriority="high"
          />
        </div>
      )}
      
      <!-- Post header -->
      <header class="mb-8">
        <h1 class="text-4xl font-bold mb-4">{entry.data.title}</h1>
        
        <div class="flex flex-wrap items-center text-gray-600 dark:text-gray-400 mb-4">
          <time class="mr-4">
            <span class="font-medium">Published:</span> {formatDate(entry.data.pubDate)}
          </time>
          
          {entry.data.updatedDate && (
            <time class="mr-4">
              <span class="font-medium">Updated:</span> {formatDate(entry.data.updatedDate)}
            </time>
          )}
          
          <span class="mr-4">
            <span class="font-medium">Reading time:</span> {readingTime} min
          </span>
        </div>
        
        {entry.data.tags && entry.data.tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map(tag => (
              <span class="bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-3 py-1 rounded-full text-sm">
                {tag}
              </span>
            ))}
          </div>
        )}
      </header>
      
      <!-- Navigation -->
      <NotionNav />
      
      <!-- Post content -->
      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Content components={components} />
      </div>
      
      <!-- Related posts -->
      <RelatedPosts currentPost={entry} />
      
      <!-- Back to blog link -->
      <div class="mt-12 pt-6 border-t border-gray-200 dark:border-gray-700">
        <a href="/blog" class="text-blue-600 dark:text-blue-400 hover:underline inline-flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to all posts
        </a>
      </div>
    </div>
  </article>
</Layout>

<script>
  // Simple client-side script to enhance images and add IDs to headings
  document.addEventListener('DOMContentLoaded', () => {
    // Add IDs to headings if they don't have them
    const headings = document.querySelectorAll('.prose h2, .prose h3');
    headings.forEach((heading, index) => {
      if (!heading.id) {
        const headingText = heading.textContent;
        heading.id = headingText
          .toLowerCase()
          .replace(/[^\w\s]/g, '')
          .replace(/\s+/g, '-');
        
        // Add a number if ID already exists
        if (document.getElementById(heading.id) !== heading) {
          heading.id = `${heading.id}-${index}`;
        }
      }
    });
    
    // Find all images in the blog content that aren't already wrapped
    const images = document.querySelectorAll('.prose img:not([data-processed])');
    
    images.forEach(img => {
      // Skip if image is already in a figure element
      if (img.closest('figure')) {
        img.setAttribute('data-processed', 'true');
        return;
      }
      
      // Add width and height attributes if they don't exist
      if (!img.hasAttribute('width')) {
        img.setAttribute('width', '800');
      }
      
      if (!img.hasAttribute('height')) {
        img.setAttribute('height', '600');
      }
      
      // Add loading="lazy" attribute
      img.setAttribute('loading', 'lazy');
      
      // Add class for styling
      img.className = 'w-full h-auto rounded-md';
      
      // Mark as processed
      img.setAttribute('data-processed', 'true');
    });
  });
</script> 