---
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { formatDate } from '../../utils';
import { Image } from 'astro:assets';

// Generate static paths for all podcast episodes
export async function getStaticPaths() {
  const podcastEntries = await getCollection('podcasts');
  return podcastEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const { 
  title, 
  description, 
  pubDate, 
  audioFile, 
  duration, 
  episodeNumber, 
  season, 
  coverImage, 
  externalLinks,
  guests,
  tags
} = entry.data;

// Generate structured data for the podcast episode
const structuredData = {
  "@context": "https://schema.org",
  "@type": "PodcastEpisode",
  "name": title,
  "description": description,
  "datePublished": pubDate,
  "timeRequired": duration,
  "episodeNumber": episodeNumber,
  "partOfSeason": {
    "@type": "PodcastSeason",
    "seasonNumber": season
  },
  "partOfSeries": {
    "@type": "PodcastSeries",
    "name": "Prassanna Ravishankar's Podcast"
  }
};

// Add guests to structured data if available
if (guests && guests.length > 0) {
  structuredData.contributor = guests.map(guest => ({
    "@type": "Person",
    "name": guest.name
  }));
}

// Add audio file to structured data if available
if (audioFile) {
  structuredData.associatedMedia = {
    "@type": "AudioObject",
    "contentUrl": new URL(audioFile, Astro.site).toString()
  };
}
---

<Layout title={`${title} | Podcasts | Prassanna Ravishankar`} description={description}>
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  
  <main class="container mx-auto px-4 py-8">
    <a href="/podcasts" class="inline-flex items-center text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300 mb-6">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
      </svg>
      Back to all podcasts
    </a>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
      <div class="md:flex">
        <div class="md:w-1/3">
          {coverImage ? (
            <Image 
              src={coverImage} 
              alt={`Cover image for ${title}`}
              width={600}
              height={800}
              class="w-full h-64 md:h-full object-cover"
            />
          ) : (
            <div class="w-full h-64 md:h-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
              <span class="text-gray-500 dark:text-gray-400">No cover image</span>
            </div>
          )}
        </div>
        
        <div class="md:w-2/3 p-6">
          <div class="flex flex-wrap items-center gap-2 mb-2">
            {season && episodeNumber && (
              <span class="bg-indigo-600 text-white text-xs font-bold px-2 py-1 rounded">
                Season {season}, Episode {episodeNumber}
              </span>
            )}
            
            <span class="text-gray-600 dark:text-gray-400 text-sm">
              {formatDate(pubDate)}
            </span>
            
            {duration && (
              <span class="text-gray-600 dark:text-gray-400 text-sm">
                • {duration}
              </span>
            )}
          </div>
          
          <h1 class="text-3xl font-bold mb-4">{title}</h1>
          <p class="text-gray-700 dark:text-gray-300 mb-6">{description}</p>
          
          {audioFile && (
            <div class="mb-6">
              <h2 class="text-xl font-semibold mb-2">Listen</h2>
              <audio controls class="w-full">
                <source src={audioFile} type="audio/mpeg">
                Your browser does not support the audio element.
              </audio>
            </div>
          )}
          
          {externalLinks && externalLinks.length > 0 && (
            <div class="mb-6">
              <h2 class="text-xl font-semibold mb-2">Listen on</h2>
              <div class="flex flex-wrap gap-2">
                {externalLinks.map((link: { platform: string; url: string }) => (
                  <a 
                    href={link.url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    class="inline-flex items-center bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 px-3 py-1 rounded transition-colors duration-200"
                  >
                    {link.platform}
                  </a>
                ))}
              </div>
            </div>
          )}
          
          {guests && guests.length > 0 && (
            <div class="mb-6">
              <h2 class="text-xl font-semibold mb-2">Guests</h2>
              <ul class="space-y-2">
                {guests.map((guest: { name: string; title: string; }) => (
                  <li>
                    <span class="font-medium">{guest.name}</span>
                    {guest.title && <span class="text-gray-600 dark:text-gray-400"> • {guest.title}</span>}
                  </li>
                ))}
              </ul>
            </div>
          )}
          
          {tags && tags.length > 0 && (
            <div>
              <h2 class="text-xl font-semibold mb-2">Topics</h2>
              <div class="flex flex-wrap gap-2">
                {tags.map((tag: string) => (
                  <span class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded text-sm">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div class="p-6 border-t border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-bold mb-4">Show Notes</h2>
        <div class="prose dark:prose-invert max-w-none">
          <Content />
        </div>
      </div>
    </div>
  </main>
</Layout> 