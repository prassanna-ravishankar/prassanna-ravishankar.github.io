---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

// Get all blog posts and extract unique tags with counts
const allPosts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Count posts per tag
const tagCounts = {};
allPosts.forEach(post => {
  post.data.tags?.forEach(tag => {
    tagCounts[tag] = (tagCounts[tag] || 0) + 1;
  });
});

// Sort tags by count (descending) then alphabetically
const sortedTags = Object.entries(tagCounts)
  .sort(([a, countA], [b, countB]) => {
    if (countB !== countA) {
      return countB - countA;
    }
    return a.localeCompare(b);
  });

// Generate schema for tags page
const tagsSchema = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "Blog Tags",
  "description": "Browse all blog post tags on Prassanna Ravishankar's website",
  "url": "https://prassanna.io/tags/",
  "mainEntity": {
    "@type": "ItemList",
    "numberOfItems": sortedTags.length,
    "itemListElement": sortedTags.map(([tag, count], index) => ({
      "@type": "ListItem",
      "position": index + 1,
      "item": {
        "@type": "Thing",
        "name": tag,
        "url": `https://prassanna.io/tags/${tag}/`,
        "description": `${count} blog posts tagged with ${tag}`
      }
    }))
  }
};
---

<Layout 
  title="Blog Tags | Prassanna Ravishankar"
  description={`Browse all ${sortedTags.length} blog tags. Discover articles by topic including Machine Learning, AI, Technology, and more.`}
>
  <!-- Tags page structured data -->
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(tagsSchema)} />
  
  <div class="container mx-auto py-12 px-4">
    <div class="max-w-4xl mx-auto">
      <!-- Breadcrumb navigation -->
      <nav class="text-sm text-gray-500 dark:text-gray-400 mb-8" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2">
          <li>
            <a href="/" class="hover:text-blue-600 dark:hover:text-blue-400">Home</a>
          </li>
          <li>
            <svg class="w-3 h-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li>
            <a href="/blog/" class="hover:text-blue-600 dark:hover:text-blue-400">Blog</a>
          </li>
          <li>
            <svg class="w-3 h-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li>
            <span class="text-gray-700 dark:text-gray-300" aria-current="page">
              Tags
            </span>
          </li>
        </ol>
      </nav>

      <!-- Header -->
      <header class="mb-12 text-center">
        <h1 class="text-4xl font-bold mb-4">Blog Tags</h1>
        <p class="text-xl text-gray-600 dark:text-gray-400">
          Browse articles by topic. {sortedTags.length} tags available covering {allPosts.length} articles.
        </p>
      </header>

      <!-- Tags cloud -->
      <div class="mb-12">
        <h2 class="text-2xl font-semibold mb-6">All Tags</h2>
        <div class="flex flex-wrap gap-3">
          {sortedTags.map(([tag, count]) => {
            // Calculate relative size based on post count
            const maxCount = Math.max(...sortedTags.map(([_, c]) => c));
            const relativeSize = Math.max(0.8, count / maxCount);
            const fontSize = `${0.875 + relativeSize * 0.5}rem`;
            
            return (
              <a 
                href={`/tags/${tag}/`}
                class="inline-block px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full hover:bg-blue-100 dark:hover:bg-blue-900 hover:text-blue-700 dark:hover:text-blue-300 transition-colors"
                style={`font-size: ${fontSize}`}
                title={`${count} ${count === 1 ? 'post' : 'posts'}`}
              >
                {tag}
                <span class="ml-1 text-xs opacity-70">({count})</span>
              </a>
            );
          })}
        </div>
      </div>

      <!-- Popular tags -->
      <div class="mb-12">
        <h2 class="text-2xl font-semibold mb-6">Popular Tags</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedTags.slice(0, 9).map(([tag, count]) => (
            <a 
              href={`/tags/${tag}/`}
              class="block p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow border border-gray-200 dark:border-gray-700"
            >
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                  {tag}
                </h3>
                <span class="bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 px-2 py-1 rounded-full text-sm">
                  {count} {count === 1 ? 'post' : 'posts'}
                </span>
              </div>
              <p class="text-gray-600 dark:text-gray-400 text-sm mt-2">
                Explore all articles tagged with {tag}
              </p>
            </a>
          ))}
        </div>
      </div>

      <!-- Back to blog link -->
      <div class="pt-6 border-t border-gray-200 dark:border-gray-700 text-center">
        <a 
          href="/blog/" 
          class="text-blue-600 dark:text-blue-400 hover:underline inline-flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to all posts
        </a>
      </div>
    </div>
  </div>
</Layout> 