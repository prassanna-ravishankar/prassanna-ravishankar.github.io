---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog', ({ data }) => {
    return import.meta.env.PROD ? !data.draft : true;
  });
  
  // Create a set of unique tags
  const uniqueTags = [...new Set(allPosts.flatMap((post) => post.data.tags || []))];
  
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => 
      post.data.tags?.includes(tag)
    );
    return {
      params: { tag },
      props: { posts: filteredPosts, tag },
    };
  });
}

const { posts, tag } = Astro.props;

// Sort posts by date (newest first)
const sortedPosts = posts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Format date function
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

// Generate schema for tag page
const tagSchema = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": `Posts tagged "${tag}"`,
  "description": `All blog posts tagged with ${tag} by Prassanna Ravishankar`,
  "url": `https://prassanna.io/tags/${tag}/`,
  "mainEntity": {
    "@type": "ItemList",
    "numberOfItems": sortedPosts.length,
    "itemListElement": sortedPosts.map((post, index) => ({
      "@type": "ListItem",
      "position": index + 1,
      "item": {
        "@type": "BlogPosting",
        "headline": post.data.title,
        "description": post.data.description,
        "url": `https://prassanna.io/blog/${post.slug}/`,
        "datePublished": post.data.pubDate.toISOString(),
        "author": {
          "@type": "Person",
          "name": "Prassanna Ravishankar"
        }
      }
    }))
  }
};
---

<Layout 
  title={`Posts tagged "${tag}" | Prassanna Ravishankar`}
  description={`All blog posts tagged with ${tag}. Explore ${sortedPosts.length} articles on ${tag} by Prassanna Ravishankar.`}
>
  <!-- Tag page structured data -->
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(tagSchema)} />
  
  <div class="container mx-auto py-12 px-4">
    <div class="max-w-4xl mx-auto">
      <!-- Breadcrumb navigation -->
      <nav class="text-sm text-gray-500 dark:text-gray-400 mb-8" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2">
          <li>
            <a href="/" class="hover:text-blue-600 dark:hover:text-blue-400">Home</a>
          </li>
          <li>
            <svg class="w-3 h-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li>
            <a href="/blog/" class="hover:text-blue-600 dark:hover:text-blue-400">Blog</a>
          </li>
          <li>
            <svg class="w-3 h-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li>
            <span class="text-gray-700 dark:text-gray-300" aria-current="page">
              Tag: {tag}
            </span>
          </li>
        </ol>
      </nav>

      <!-- Header -->
      <header class="mb-12 text-center">
        <h1 class="text-4xl font-bold mb-4">
          Posts tagged <span class="text-blue-600 dark:text-blue-400">"{tag}"</span>
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-400">
          {sortedPosts.length} {sortedPosts.length === 1 ? 'article' : 'articles'} found
        </p>
      </header>

      <!-- Posts list -->
      <div class="space-y-8">
        {sortedPosts.map((post) => (
          <article class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
            <div class="p-6">
              <div class="flex flex-col md:flex-row md:items-center justify-between mb-4">
                <h2 class="text-2xl font-bold">
                  <a 
                    href={`/blog/${post.slug}/`} 
                    class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                  >
                    {post.data.title}
                  </a>
                </h2>
                <time class="text-gray-500 dark:text-gray-400 text-sm mt-1 md:mt-0">
                  {formatDate(post.data.pubDate)}
                </time>
              </div>
              
              <p class="text-gray-600 dark:text-gray-300 mb-4">
                {post.data.description}
              </p>
              
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-4">
                  {post.data.tags.map((postTag) => (
                    <a
                      href={`/tags/${postTag}/`}
                      class={`px-2 py-1 rounded text-sm transition-colors ${
                        postTag === tag 
                          ? 'bg-blue-600 text-white' 
                          : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                      }`}
                    >
                      {postTag}
                    </a>
                  ))}
                </div>
              )}
              
              <a 
                href={`/blog/${post.slug}/`} 
                class="text-blue-600 dark:text-blue-400 hover:underline inline-flex items-center"
              >
                Read more
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                </svg>
              </a>
            </div>
          </article>
        ))}
      </div>

      <!-- Back to blog link -->
      <div class="mt-12 pt-6 border-t border-gray-200 dark:border-gray-700 text-center">
        <a 
          href="/blog/" 
          class="text-blue-600 dark:text-blue-400 hover:underline inline-flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to all posts
        </a>
      </div>
    </div>
  </div>
</Layout> 