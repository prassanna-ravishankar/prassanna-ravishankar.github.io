---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

// Handle query parameters - redirect to clean URL if present
if (Astro.url.search) {
  // Use 301 redirect for SEO benefits, ensuring trailing slash consistency
  return Astro.redirect('/blog/', 301);
}

// Get all blog posts that are not drafts
const posts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Sort posts by date in descending order
const sortedPosts = posts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Get unique tags for the tag cloud
const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))];
const shuffledTags = allTags.sort(() => Math.random() - 0.5).slice(0, 10); // Random 10 tags

// Format date function
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

// Get latest posts for description
const latestPosts = sortedPosts.slice(0, 3);

// SEO-optimized meta description
const blogDescription = `Explore ${posts.length} technical articles on machine learning, MLOps, AI engineering, and software development by Prassanna Ravishankar. Latest insights on ${latestPosts.map(p => p.data.title).slice(0, 2).join(', ')} and more.`;

// Blog-specific structured data
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Blog",
  "name": "Prassanna Ravishankar - Technical Blog",
  "description": blogDescription,
  "url": "https://prassanna.io/blog/",
  "author": {
    "@type": "Person",
    "name": "Prassanna Ravishankar",
    "url": "https://prassanna.io",
    "sameAs": [
      "https://github.com/prassanna-ravishankar",
      "https://linkedin.com/in/prassanna-ravishankar",
      "https://x.com/thenomadiccoder"
    ]
  },
  "blogPost": sortedPosts.slice(0, 10).map(post => ({
    "@type": "BlogPosting",
    "headline": post.data.title,
    "description": post.data.description,
    "url": `https://prassanna.io/blog/${post.slug}/`,
    "datePublished": post.data.pubDate.toISOString(),
    "dateModified": post.data.updatedDate?.toISOString() || post.data.pubDate.toISOString(),
    "author": {
      "@type": "Person",
      "name": "Prassanna Ravishankar"
    },
    "keywords": post.data.tags?.join(', ') || '',
    "image": post.data.heroImage ? `https://prassanna.io${post.data.heroImage}` : "https://prassanna.io/images/profile.jpg"
  }))
};
---

<Layout 
  title="Technical Blog - Prassanna Ravishankar" 
  description={blogDescription}
  structuredData={structuredData}
>
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl md:text-4xl font-semibold mb-6 text-center text-neutral-900 dark:text-neutral-100">Blog</h1>
    
    <p class="text-lg mb-8 text-center text-neutral-600 dark:text-neutral-400 max-w-3xl mx-auto leading-relaxed">
      Technical insights on machine learning, MLOps, AI engineering, and software development. 
      Sharing practical experiences and deep dives into the latest trends in tech.
    </p>
    
    <!-- Tag Cloud -->
    <section class="mb-12">
      <h2 class="text-xl font-semibold mb-4 text-center text-neutral-800 dark:text-neutral-200">Popular Topics</h2>
      <div class="flex flex-wrap justify-center gap-2 max-w-4xl mx-auto">
        {shuffledTags.map(tag => (
          <a href={`/tags/${tag}/`} class="tag-elegant">
            {tag}
          </a>
        ))}
      </div>
    </section>
    
    <!-- Blog Posts Grid -->
    <section class="max-w-6xl mx-auto">
      <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {sortedPosts.map((post) => (
          <article class="card-elegant group">
            {post.data.heroImage && (
              <div class="image-elegant mb-4">
                <Image 
                  src={post.data.heroImage} 
                  alt={post.data.title}
                  width={400}
                  height={192}
                  class="w-full h-48 object-cover rounded-lg"
                  loading="lazy"
                />
              </div>
            )}
            <div class="p-2">
              <header class="mb-3">
                <h2 class="text-lg font-semibold mb-2 leading-tight group-hover:text-accent-600 dark:group-hover:text-accent-400 transition-colors">
                  <a 
                    href={`/blog/${post.slug}/`}
                    class="link-elegant"
                  >
                    {post.data.title}
                  </a>
                </h2>
                <time datetime={post.data.pubDate.toISOString()} class="text-sm text-neutral-500 dark:text-neutral-400 flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
                  </svg>
                  {formatDate(post.data.pubDate)}
                </time>
              </header>
              <p class="text-neutral-600 dark:text-neutral-400 mb-3 line-clamp-3 leading-relaxed text-sm">
                {post.data.description}
              </p>
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-1 mb-3">
                  {post.data.tags.slice(0, 3).map(tag => (
                    <span class="bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400 px-2 py-1 rounded text-xs font-medium">
                      {tag}
                    </span>
                  ))}
                </div>
              )}
              <a href={`/blog/${post.slug}/`} class="link-elegant text-sm font-medium">
                Read more â†’
              </a>
            </div>
          </article>
        ))}
      </div>
    </section>
  </main>
</Layout> 